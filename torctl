#!/bin/bash

################################################################################
#                                                                              #
# torctl.sh - redirect all traffic through tor network                         #
#                                                                              #
# DESCRIPTION                                                                  #
# Script to redirect all traffic through tor network including                 #
# dns queries for anonymizing entire system                                    #
#                                                                              #
#                                                                              #
# AUTHORS                                                                      #
# sepehrdad.dev@gmail.com                                                      #
#                                                                              #
################################################################################

# torctl.sh version
VERSION="torctl.sh v0.4"

# exclude locals
TOR_EXCLUDE="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"

# tor uid
TOR_UID="tor"

# tor socks port
TOR_PORT="9040"

# tor dns port
TOR_DNS="9053"

# colors
GREEN="$(tput setaf 2)"
RED="$(tput setaf 1)"
REDB="$(tput bold; tput setaf 1)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
NC="$(tput sgr0)"


# print error and exit
err()
{
  echo "${RED}[-]${NC} ERROR: ${@}"
  exit 1
}


# print warning
warn()
{
  echo "${YELLOW}[!]${NC} WARNING: ${@}"
}

# print message
msg()
{
  echo "${GREEN}[+]${NC} ${@}"
}

# print info
info()
{
  echo "${BLUE}[*]${NC} ${@}"
}

banner()
{
  echo -e "${REDB}--==[ torctl.sh by blackarch.org ]==--${NC}\n"
}

version()
{
  echo "${VERSION}"
}

checkroot()
{
  if [ $(id -u) -ne 0 ]; then
      err "This script must be run as root"
  fi
}

sysinfo()
{
  LADDR=$(ip route get 1.1.1.1)
  LSRC=$(echo $LADDR | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
  IFACE=$(echo $LADDR | awk -F"dev " 'NR==1{split($2,a," ");print a[1]}')
  MAC=$(cat /sys/class/net/$IFACE/address)
  RADDR=$(wget -qO- http://ipecho.net/plain)
  msg "local ip: $LSRC (IFACE: $IFACE, MAC: $MAC)"
  msg "remote ip: $RADDR"
}

start()
{
  # check if root
  checkroot

  # generate new torrc
  gentorrc

  if [[ $(systemctl is-active tor) != "active" ]]; then
    warn "tor is not started"
	info "starting tor service"
	systemctl start tor || err "unable to start tor service"
    msg "started tor service"
  else
    warn "tor is running"
    info "reloading tor service"
    systemctl reload tor || err "unable to reload tor service"
    msg "reloaded tor service"
  fi

  info "backing up nameservers"
  mv /etc/resolv.conf /etc/resolv.conf.bak
  echo -e '# generated by torctl\nnameserver 127.0.0.1\nnameserver 1.1.1.1\nnameserver 1.0.0.1' > /etc/resolv.conf;
  msg "backed up nameservers"

  if ! [ -f /tmp/iptables.rules ]; then
      info "backing up iptables rules"
      iptables-save > /tmp/iptables.rules
      msg "backed up iptables rules"
  fi

  iptables -F
  iptables -t nat -F

  # disable ipv6
  info "disabling ipv6"
  sysctl -w net.ipv6.conf.all.disable_ipv6=1 > "/dev/null"
  sysctl -w net.ipv6.conf.default.disable_ipv6=1 > "/dev/null"
  msg "disabled ipv6"

  info "redirecting all traffic through tor"
  # set iptables nat
  iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN
  # set dns redirect
  iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports $TOR_DNS
  iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports $TOR_DNS
  iptables -t nat -A OUTPUT -p udp -m owner --uid-owner $TOR_UID -m udp --dport 53 -j REDIRECT --to-ports $TOR_DNS

  # resolve .onion domains mapping 10.192.0.0/10 address space
  iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT
  iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT
  # exclude locals
  for NET in $TOR_EXCLUDE 127.0.0.0/9 127.128.0.0/10; do
      iptables -t nat -A OUTPUT -d $NET -j RETURN
      iptables -A OUTPUT -d "$NET" -j ACCEPT
  done

  # redirect all other output through tor
  iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TOR_PORT
  iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $TOR_PORT
  iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $TOR_PORT

  # accept already established connections
  iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

  # allow only tor output
  iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
  iptables -A OUTPUT -j REJECT
  msg "all traffic is being redirected through tor"
}


stop()
{
  # check if root
  checkroot

  iptables -F
  iptables -t nat -F
  if [ -f /tmp/iptables.rules ]; then
      warn "restoring iptables rules"
      iptables-restore < /tmp/iptables.rules
      rm /tmp/iptables.rules
      msg "restored iptables rules"
  fi

  if [ -e /etc/resolv.conf.bak ]; then
      warn "restoring nameservers"
      rm /etc/resolv.conf
      mv /etc/resolv.conf.bak /etc/resolv.conf
      msg "restored nameservers"
  fi

  if [ -e /etc/tor/torrc.bak ]; then
      warn "restoring tor config"
      rm /etc/tor/torrc
      mv /etc/tor/torrc.bak /etc/tor/torrc
      msg "restored tor config"
  fi

  # enable ipv6
  info "enabling ipv6"
  sysctl -w net.ipv6.conf.all.disable_ipv6=0 > "/dev/null"
  sysctl -w net.ipv6.conf.default.disable_ipv6=0 > "/dev/null"
  systemctl stop tor
}


change()
{
  checkroot
  info "changing tor identity"
  systemctl restart tor > "/dev/null"
  msg "tor identity changed"
}


status()
{
  checkroot
  TORSTATUS=$(systemctl is-active tor)
  info "tor service is: ${TORSTATUS}"
}

gentorrc()
{
  checkroot
  TORRC="/etc/tor/torrc"
  warn "backing up tor config"
  mv "$TORRC" "$TORRC.bak"
  cat > "${TORRC}" << EOF
# generated by torctl
DataDirectory /var/lib/tor
VirtualAddrNetwork 10.192.0.0/10
AutomapHostsOnResolve 1
AutomapHostsSuffixes .exit,.onion
TransPort 127.0.0.1:$TOR_PORT IsolateClientAddr IsolateSOCKSAuth IsolateClientProtocol IsolateDestPort IsolateDestAddr
SocksPort 127.0.0.1:9050 IsolateClientAddr IsolateSOCKSAuth IsolateClientProtocol IsolateDestPort IsolateDestAddr
ControlPort 9051
HashedControlPassword 16:FDE8ED505C45C8BA602385E2CA5B3250ED00AC0920FEC1230813A1F86F
DNSPort 127.0.0.1:$TOR_DNS
HardwareAccel 1
TestSocks 1
AllowNonRFC953Hostnames 0
WarnPlaintextPorts 23,109,110,143,80
ClientRejectInternalAddresses 1
NewCircuitPeriod 40
MaxCircuitDirtiness 600
MaxClientCircuitsPending 48
UseEntryGuards 1
EnforceDistinctSubnets 1
EOF
  chmod 644 ${TORRC}
  msg "backed up tor config"
}

memwipe()
{
  checkroot
  warn "enabling memwipe"
  SERVICE="/etc/systemd/system/memwipe.service"
  cat > "${SERVICE}" << EOF
[Unit]
Description=torctl memwipe
After=umount.target
Before=shutdown.target reboot.target halt.target

[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/bin/true
ExecStop=$(dirname `which $0`) wipe

[Install]
WantedBy=multi-user.target
EOF
  systemctl enable memwipe > "/dev/null"
  msg "enabled memwipe"
}

wipe()
{
  checkroot
  echo 1024 > /proc/sys/vm/min_free_kbytes
  echo 3  > /proc/sys/vm/drop_caches
  echo 1  > /proc/sys/vm/oom_kill_allocating_task
  echo 1  > /proc/sys/vm/overcommit_memory
  echo 0 > /proc/sys/vm/oom_dump_tasks
  smem-secure-delete -fllv
}

usage()
{
  echo -e "usage:\n"
  echo -e "  torctl.sh start | stop | status | restart | info | change | version\n"
  echo -e "options:\n"
  echo -e "  start   - start tor and redirect all traffic through tor"
  echo -e "  stop    - stop tor and redirect all traffic through clearnet"
  echo -e "  status  - get tor service status"
  echo -e "  restart - restart tor and traffic rules"
  echo -e "  memwipe - enable memory wipe at shutdown"
  echo -e "  info    - get network information"
  echo -e "  change  - change tor identity"
  echo -e "  version - print version of torctl and exit\n"
}

main()
{
  banner
  case "$1" in
      start)
          start
          ;;
      stop)
          stop
          ;;
      change)
          change
          ;;
      status)
          status
          ;;
      memwipe)
          memwipe
          ;;
      info)
          sysinfo
          ;;
      restart)
          stop
          sleep 1
          start
          ;;
      version)
          version
          ;;
      wipe)
          wipe
          ;;
      *)
          usage
          exit 1
          ;;
  esac
  exit 0
}

# call main
main "${@}"


# EOF
